.PHONY: setup install-deps deploy init vault-edit vault-view vault-create generate-inventory prepare-ssh-key

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞
init:
	@if [ ! -f .env ]; then \
		cp env.example .env; \
		echo "‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω –∏–∑ env.example"; \
		echo "üìù –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏"; \
	else \
		echo "‚úÖ –§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"; \
	fi

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è inventory.ini –∏–∑ —à–∞–±–ª–æ–Ω–∞
generate-inventory:
	@if [ -f .env ]; then \
		export $$(grep -v '^#' .env | xargs) && \
		envsubst < inventory.template.ini > inventory.ini; \
		echo "‚úÖ –§–∞–π–ª inventory.ini —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏–∑ —à–∞–±–ª–æ–Ω–∞"; \
	else \
		echo "‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ 'make init'"; \
		exit 1; \
	fi

# –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ vault
vault-create:
	@if [ -f .env ]; then \
		export $$(grep -v '^#' .env | xargs) && \
		ansible-vault create group_vars/webservers/vault.yml; \
	else \
		echo "‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ 'make init'"; \
		exit 1; \
	fi

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ vault
vault-edit:
	@if [ -f .env ]; then \
		export $$(grep -v '^#' .env | xargs) && \
		ansible-vault edit group_vars/webservers/vault.yml; \
	else \
		echo "‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ 'make init'"; \
		exit 1; \
	fi

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ vault
vault-view:
	@if [ -f .env ]; then \
		export $$(grep -v '^#' .env | xargs) && \
		ansible-vault view group_vars/webservers/vault.yml; \
	else \
		echo "‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ 'make init'"; \
		exit 1; \
	fi

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Ansible Galaxy
install-deps:
	ansible-galaxy role install -r requirements.yml
	ansible-galaxy collection install -r requirements.yml

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ (—É—Å—Ç–∞–Ω–æ–≤–∫–∞ pip –∏ docker)
setup: generate-inventory install-deps
	ansible-playbook -i inventory.ini playbook.yml

# –î–µ–ø–ª–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Redmine
deploy: generate-inventory install-deps
	@if [ -f .env ]; then \
		export $$(grep -v '^#' .env | xargs) && \
		ansible-playbook -i inventory.ini deploy.yml --ask-vault-pass; \
	else \
		echo "‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ 'make init'"; \
		exit 1; \
	fi

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ DataDog –∞–≥–µ–Ω—Ç–∞
datadog: generate-inventory install-deps
	@if [ -f .env ]; then \
		export $$(grep -v '^#' .env | xargs) && \
		ansible-playbook -i inventory.ini datadog.yml --ask-vault-pass; \
	else \
		echo "‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ 'make init'"; \
		exit 1; \
	fi

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ SSH –∫–ª—é—á–∞ –¥–ª—è Ansible
prepare-ssh-key:
	@if [ -n "$$ANSIBLE_SSH_PRIVATE_KEY" ]; then \
		echo "$$ANSIBLE_SSH_PRIVATE_KEY" | tr -d '\r' > /tmp/ansible_ssh_key; \
		chmod 600 /tmp/ansible_ssh_key; \
		echo "ANSIBLE_SSH_KEY_PATH=/tmp/ansible_ssh_key" >> .env; \
		echo "‚úÖ SSH –∫–ª—é—á –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω"; \
	else \
		echo "‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ANSIBLE_SSH_PRIVATE_KEY –Ω–µ –∑–∞–¥–∞–Ω–∞"; \
		exit 1; \
	fi 